#include "./Math.hexpattern"

// hexical
#define Theodolite Purification
#define Dioscuri Gambit II

#define Get Relative Angles = vec, vec, vec, vec -> num, num
// reference look, reference up, current look, current up -> yaw, pitch
// Given reference and current look/up directions, returns the current yaw and pitch relative to the reference.
// All inputs should be unit vectors, and the returned values are in radians.
// Yaw increases right, and pitch increases down.
{
    /*
    l_right
    l
    m_rot
    */
    // right vectors
    Numerical Reflection: 4
    Dioscuri Gambit II
    Bookkeeper's Gambit: v-v----
    Division Distillation
    Rotation Gambit II
    Division Distillation
    
    // yaw (angle between current right and reference right)
    Gemini Decomposition
    Rotation Gambit
    Vector Reflection -Y
    Theta Exaltation
    
    // rotate current look about y axis to cancel out yaw
    // note: yaw is positive clockwise, but rotations are positive counterclockwise
    // so we don't need to negate the pitch for this
    Rotation Gambit
    Prospector's Gambit
    Vector Reflection +Y
    Jester's Gambit
    Rotation Distillation
    Jester's Gambit
    Multiplication Distillation: Matrix

    // pitch (angle between rotated current look and reference look)
    Rotation Gambit
    Numerical Reflection: 4
    Fisherman's Gambit
    Jester's Gambit
    Theta Exaltation
}

#define Mouse Input = vec, vec, vec, vec -> (num, num) | null
// reference look, reference up, current look, current up -> x, y
// Given reference and current look/up directions, returns an x/y mouse position relative to the reference position.
// The position (0, 0) is at the reference, x increases when yawing right, and y increases when pitching up.
// The coordinates range from -1 to 1, at -90 and 90 degrees from the reference respectively.
// If the mouse goes out of bounds in either axis, a single null value is returned.
{
    // bounds check (out of range if true)
    // since we're checking for +/- 90 degrees, we can just do a dot product test on the up (or look) directions
    Gemini Decomposition
    Numerical Reflection: 3
    Fisherman's Gambit II

    Multiplicative Distillation
    Numerical Reflection: 0
    Minimus Distillation
    
    Numerical Reflection: 96  // edcba -> aedcb
    Swindler's Gambit

    // get scaled coordinates
    Get Relative Angles

    Numerical Reflection: -1  // invert pitch
    Multiplicative Distillation
    
    Circle's Reflection  // tau / 4 = 90 degrees
    Numerical Reflection: 4
    Division Distillation
    Undertaker's Gambit
    
    Division Distillation
    Rotation Gambit II
    Division Distillation
    Jester's Gambit

    // return null if out of range
    Rotation Gambit
    Nullary Reflection
    Jester's Gambit
    {
        Bookkeeper's Gambit: vv-
        Bookkeeper's Gambit: v
    }
    Flock's Disintegration
    Augur's Exaltation
    Hermes' Gambit
}
